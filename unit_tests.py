import unittest

from Classifier_noargs import main as main




class TestDecoder(unittest.TestCase):

    def test_invalid(self):
        self.assertEqual(main("gskj;l;kjla;kjlk;sgdjlasgd;kljasdgk;jlgjk;lwek;lewlk;jrlkrwjvlkjlketklj",False,True), (400,False,"gskj;l;kjla;kjlk;sgdjlasgd;kljasdgk;jlgjk;lwek;lewlk;jrlkrwjvlkjlketklj"))

    def test_binary(self):
        self.assertEqual(main("01101100 01100101 01110100 01110011 00100000 01110100 01110010 01111001 00100000 01110011 01101111 01101101 01100101 00100000 01100010 01101001 01101110 01100001 01110010 01111001 00100000 01101111 01110101 01110100 00100001",False,True), (200,False,"lets try some binary out!"))
    
    def test_base32(self):
        self.assertEqual(main("MJQXGZJTGIQGS4ZAON2XAZLSEBRW63LNN5XCA2LOEBBVIRRHOM======",False,True), (200,False,"base32 is super common in CTF's"))

    def test_base64(self):   
        self.assertEqual(main("RWFjaCBCYXNlNjQgZGlnaXQgcmVwcmVzZW50cyBleGFjdGx5IDYgYml0cyBvZiBkYXRhLg==",False,True), (200,False,"Each Base64 digit represents exactly 6 bits of data."))
    
    def test_hex(self):
        self.assertEqual(main("68 65 78 61 64 65 63 69 6d 61 6c 20 6f 72 20 62 61 73 65 31 36 3f",False,True), (200,False,"hexadecimal or base16?"))

    def test_rot13(self):
        self.assertEqual(main("Ebgngr zr 13 cynprf!",False,True), (200,False,"Rotate me 13 places!"))

    def test_rot47(self):
        self.assertEqual(main("*@F DA:? >6 C:89E C@F?5 323J C:89E C@F?5 Wcf E:>6DX",False,True), (200,False,"You spin me right round baby right round (47 times)")) 
    
    def test_morse(self):
        self.assertEqual(main(". .-.. . -.-. --- -- -- ..- -. .. -.-. .- - .. --- -. . -. -.-. --- -.. .. -. --.",False,True), (200,False,"ELECOMMUNICATIONENCODING")) 

    def test_BCD(self):
        self.assertEqual(main("85 110 112 97 99 107 32 116 104 105 115 32 66 67 68",False,True), (200,False,"Unpack this BCD")) 
    
    def test_nested(self):
        self.assertEqual(main("LS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0KLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLS0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLi0tLS0KLS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLS0gLi0tLS0gLS0tLS0gLi0tLS0=",False,True), (200,False,"Let's make this a bit trickier..."))

    def test_complex(self):
        self.assertEqual(main("4d 6b 52 53 4e 79 55 7a 4b 31 68 6b 56 44 46 6a 4f 47 4e 52 51 47 78 61 4e 53 49 77 61 30 55 77 63 7a 4d 72 59 57 30 68 4d 69 34 36 4a 43 73 79 4b 57 51 32 53 54 49 70 4c 57 64 43 51 54 49 32 4a 58 51 3d",False,True), (400,True,"628c8e0e45ccc9041e428f105add57155114d261")) 

    def test_url(self):
        self.assertEqual(main("list%20%3Bthis%27string",False,True), (200,False,"list ;this'string")) 
    
    def test_b45(self):
        self.assertEqual(main("GVC8VC3EFD$DC44V3EU1DJ.CKPC",False,True), (200,False,"dodgy mc dodg face")) 

    def test_htmlEntity(self):
        self.assertEqual(main("&#100;&#111;&#100;&#103;&#121;&#32;&#109;&#99;&#32;&#100;&#111;&#100;&#103;&#32;&#102;&#97;&#99;&#101;",False,True), (200,False,"dodgy mc dodg face")) 

    def test_octal(self):
        self.assertEqual(main("JiM0OTsmIzUyOyYjNTI7JiMzMjsmIzQ5OyYjNTM7JiM1NTsmIzMyOyYjNDk7JiM1MjsmIzUyOyYjMzI7JiM0OTsmIzUyOyYjNTU7JiMzMjsmIzQ5OyYjNTU7JiM0OTsmIzMyOyYjNTI7JiM0ODsmIzMyOyYjNDk7JiM1MzsmIzUzOyYjMzI7JiM0OTsmIzUyOyYjNTE7JiMzMjsmIzUyOyYjNDg7JiMzMjsmIzQ5OyYjNTI7JiM1MjsmIzMyOyYjNDk7JiM1MzsmIzU1OyYjMzI7JiM0OTsmIzUyOyYjNTI7JiMzMjsmIzQ5OyYjNTI7JiM1NTsmIzMyOyYjNTI7JiM0ODsmIzMyOyYjNDk7JiM1MjsmIzU0OyYjMzI7JiM0OTsmIzUyOyYjNDk7JiMzMjsmIzQ5OyYjNTI7JiM1MTsmIzMyOyYjNDk7JiM1MjsmIzUzOw==",False,True), (200,False,"dodgy mc dodg face")) 

    def test_b85(self):
        self.assertEqual(main("LTZrPy00IWwxMDEtNmctMWNbV0UsO1YpOi02a0InNCFsMS8zJy9IMzFHViQ9LDtfREItNmtCJzQhbDEwMWNtJC8xR1YkPSw7X0RCLTZrQik0IWwxMDFIUXAuMUdWJD0sO19EQi02a0IoNCFsMTAxY20kLzFHViQ9LDtoNTwtNms/LDQhbDEuMS02Zy0xY1tXRSw7aDU8LTZrQiU0IWwxLjEtNmctMWNbV0UsO2g1PC02az8tNCFsMS4xLTZnLTFjW1dFLDtoOz4tNmtCJjQhbDEuMS02Zy0xY1tXRSw7aDU8LTZrQig0IWwxLjEtNmctMik3Nj8sO19BQS02azwlNCFsMTAyKjMtMDFjUlFELDtWKTotNmtCKTQhbDEwMUhRcC4xR1YkPSw7aDU8LTZrPyw0IWwxLjEtNmctMWNbV0UsO2g7Pi02a0ImNCFsMS4xLTZnLTFjW1dFLDtoOz4tNmtCJzQhbDEuMS02Zy0xY1tXRSw7aDs+LTZrQiU0IWwxLjEtNmctMWNbV0UsO2g4PS02az8tNCFsMS4xLTZnLTFjW1dFLDtoOD0tNmtCKTQhbDEuMS02Zy0xY1tXRSw7aDU8LTZrQiozcg==",False,True), (200,False,"a fun base 85 string")) 

    def test_stacked(self):
        self.assertEqual(main("NTAgMmIgMzkgNTEgMzcgNDIgNGIgNDIgMzkgNGIgNDkgNDIgMmQgMmEgMzkgNDcgNTQgNDEgNWEgNDIgMzggMzUgNTQgMzkgNWEgNTkgMzkgNTAgMzcgNDIgNDkgNDIgMzkgMzUgNTQgMzkgMzkgNTkgMzkgNDggNDMgNDEgMjAgNDMgNDEgMzkgNTQgMzkgMmUgNTkgMzkgNDggNTggMzcgNDggNTggMzcgNDggNTggMzc=",False,True), (200,False,"lots of encoding here")) 

    def test_plain(self):
        self.assertEqual(main("this is plain text",False,True), (200,False,"this is plain text")) 

    def test_megastacked(self):
        self.assertEqual(main("62 47 39 30 63 79 42 76 5a 69 42 6c 62 6d 4e 76 5a 47 6c 75 5a 79 42 6f 5a 58 4a 6c",False,True), (200,False,"lots of encoding here")) 

    def test_megastacked2(self):
        self.assertEqual(main("RzFXSUUxWjBKeFNCRXljR0RJeVhESDVGSlNwMEp5Y09HMDRsRlJIbEdSOUFBUTA5Q0cwOUNEPT0=",False,True), (200,False,"this is a long string"))

    def test_megastacked3(self):
        self.assertEqual(main("25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 35 33 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 35 37 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 36 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 36 38 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 37 39 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 38 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 38 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 38 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 31 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 31 30 34 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 39 37 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 37 35 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 32 31 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 37 39 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 32 31 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 32 32 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 37 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 37 36 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 31 32 30 25 33 42 25 32 36 25 32 33 37 35 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 39 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 37 37 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 32 30 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 37 36 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 37 35 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 36 37 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 30 38 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 37 35 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 38 39 25 33 42 25 32 36 25 32 33 31 32 31 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 32 32 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 37 32 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 30 30 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 37 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 37 37 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 32 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 37 33 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 38 35 25 33 42 25 32 36 25 32 33 31 32 31 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 31 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 37 35 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 32 30 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 37 34 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 34 39 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 30 25 33 42 25 32 36 25 32 33 38 36 25 33 42 25 32 36 25 32 33 36 39 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 39 30 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 38 34 25 33 42 25 32 36 25 32 33 38 32 25 33 42 25 32 36 25 32 33 38 33 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 31 30 38 25 33 42 25 32 36 25 32 33 37 38 25 33 42 25 32 36 25 32 33 37 36 25 33 42 25 32 36 25 32 33 38 37 25 33 42 25 32 36 25 32 33 31 30 37 25 33 42 25 32 36 25 32 33 31 31 32 25 33 42 25 32 36 25 32 33 37 31 25 33 42 25 32 36 25 32 33 38 31 25 33 42 25 32 36 25 32 33 31 32 32 25 33 42 25 32 36 25 32 33 34 38 25 33 42 25 32 36 25 32 33 35 37 25 33 42 25 32 36 25 32 33 38 30 25 33 42 25 32 36 25 32 33 38 31 25 33 42 25 32 36 65 71 75 61 6c 73 25 33 42 25 32 36 65 71 75 61 6c 73 25 33 42",False,True), (200,False,"this is rot 13 and i hate it very much"))


    

if __name__ == "__main__":
    unittest.main()